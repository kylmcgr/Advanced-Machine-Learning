# this is my old thing from last semester, I copied the weights after training so I wouldn't have to train each time

import gym
import time
from random import randint
from random import random
env = gym.make('Pong-ram-v0')
ob = 128
b = [-0.48449604058609874, 2.117351716865964, -2.4096238076654144, 4.6138516098891795, 8.160043976290748, 1.4813990891961089, 6.637973711048926, 0.6950144215355303, 6.610125665160676, -2.168159784855047, -0.7676208619554428, 3.1485781402416047, -2.139440130589887, 1.8548287555877192, 2.1608933066800518, 5.939682550812057, -0.8901562433678558, 1.847848800519564, 3.2920698611160084, -0.6161318287196007, 3.2426018751548016, -1.9409687977366252, -0.6082630067313675, 1.1125614703706737, -0.38896638423668217, -0.733520549174975, -2.293385124328889, -0.7216329797739258, 4.811663843797724, -0.5543540881299092, -1.5527422427980757, -3.614537692958124, -1.1323934859697062, 6.569892367160225, -0.8508328112926815, 1.878823260172927, 6.482770334266085, 0.9591358204395986, -2.0645925170077386, -0.9125252692412804, -4.522168483542206, 6.904335632465757, 6.452157259884417, 2.2774588075900466, -1.0054343293596277, 0.2964917930673634, -1.3067073803181628, 0.9337132306132914, 1.6258159213984398, 1.1114339201363768, 0.9227421438849048, 0.20050653339265145, -4.756949962716052, -0.3883610661291108, 1.071634162891162, 3.8441647041703337, 2.0020224866765197, 2.3623757636180747, 3.290639615964092, -0.7264098499136942, 1.6136310371833456, -1.3994014885786676, 5.283268726617451, 3.4353500935934838, 4.575729285793988, -1.1991142066009313, 3.0727389627253845, 0.16211582523820156, 0.5558904377029315, -0.1938095872731429, 1.6171886739809596, 0.30322587679176993, 1.5617490089585344, 2.1870588928897563, 3.439131848717111, -2.5437289136525916, -2.6392900408215607, -3.08475182721528, 1.6364283372994495, -0.5251774561488294, -0.38885845978021005, 3.424159210336625, 3.029189287416431, 2.0778202869198625, 4.961948770658366, -1.3814826293932787, 0.4453274051912679, 2.3184625939104357, 2.41880029823622, -0.591620622763207, 1.701939740694326, 1.640944028888409, 2.628205817101499, 0.7671094011117938, -1.0827799023319322, -0.003360634261305062, 2.8461205500475404, -3.2153419014294164, -1.123967022573315, 0.30361942118257645, -3.663370321222474, 1.1127077165893973, 2.980218951146524, 1.7927232624900014, 2.935216327932334, 0.07674443334539705, 2.276585896366397, 1.5503964480431631, 1.4714776677403683, -0.7979579717741279, 2.972501941372549, 1.0289822020795825, 4.656943082042564, 4.664828973171731, -0.8373948840971657, 4.613620101496384, -0.7010484293577219, 1.3994643287474422, 4.400534591861594, 2.5959230239406916, 4.6089709491994615, 7.274084908059909, 1.0338664796360504, 3.27315818513165, -0.49666561130365317, -1.2657094290209396, 3.009291038910735, 6.210318169358006, 2.004759570965862, 0.5901857703900659, -1.3889913291721068, -2.2798896166579805, -3.1956643123175623, 1.6105703187747757, -2.351435967938949, -0.24036012983878718, 1.8937870700485349, 6.712615741666267, -5.691005785440475, 1.641272470628131, -1.1673795107276221, -0.4582511459157774, 2.120310243679196, -2.686164183401498, 2.5628801854807977, 2.998709571004208, -2.3709055478907137, 4.856323705684983, 0.5315423306719644, 3.820776921000661, -1.56299346951314, 4.931824431861574, 1.2186723834188953, -3.9022975874527894, 4.8832799674478045, -0.14650717694543514, -1.8066625248383563, 1.742100183778951, 2.0512303385001847, 1.4811758081287212, 2.9444803419612855, 1.8335197018085208, 4.01303779452749, 3.3549369588373934, 2.9671664379789444, 0.4585950987758465, 2.7407364636039695, 1.877611927848178, 1.6321668288646054, 5.473545500511863, -1.657477629632885, 0.6078050271971052, 0.5671380341045826, -0.9530558850372339, 0.6119732646301823, 0.9360375086941346, 0.8849125114545207, 2.157110572125286, -0.456028269955973, 0.6315575531871775, 4.772924175794494, -0.17701010156260333, 4.690451153959996, -2.3044739734344004, -1.3961171079836001, -1.5800656135191193, 1.7015632734849735, 1.760361605470723, -4.40801975728018, 3.931173853203723, -1.858329877480989, -3.332807141009847, -0.44161300451291385, -2.5369999322649104, 0.9665815859783744, 3.0079219426344483, 0.1139507362147516, 3.5994447721915934, 0.23764985580322828, -0.06704898587981312, -4.0991662286695885, -4.71653627610518, -0.74308455069076, 6.724183173610384, -0.5352123459496538, -1.9989070804004578, 1.998034887570286, 0.6618267921612424, 2.0730764882609334, -2.1794752654253724, -1.346209241515933, 0.1316273030145192, 3.1330224127920436, -5.186264909029715, 0.9496559635437536, 4.406060375911744, -0.9467273856576139, -2.9699928032114005, -0.47320983162267694, 2.1340115199965757, 2.275864909397007, 0.9492010523029089, 3.312848401735164, -3.2302856600181062, 0.005164870260531806, -1.2319450285016775, 1.609455098251318, -0.007454987109446254, -1.9146470050646132, 2.5640460490383887, 1.7421078773278624, 0.8684583947526161, 4.073741336981207, -1.2402957634958753, -0.10439451579649206, -1.7465684004858977, 2.990515949695244, -2.0048651769268266, 2.9630492786306624, 3.7788769601497654, -2.0276282459514228, 1.7885751964646164, -0.10828544520392813, 2.4942265828809482, 3.105825764401508, 4.605172225764222, -2.11157618353845, 0.3571221320360163, 0.9895326341697437, 0.07382355157306475, 0.9353436545872533, 0.392369967017997, 1.1665389376517625, 4.001546327327523, -0.6035277267881429, 3.5777650878024545]
# b = []
# for i in range(ob*2):
#     b.append(1)
def b100(ab):
    totalScore = 0
    for k in range(100):
        observation = env.reset()
        for t in range(1000):
            # env.render()
            action1 = 0
            action2 = 0
            for x in range(ob):
                action1 += ab[x]*observation[x]
                action2 += ab[x+ob]*observation[x]
            action = 0
            if action1>action2:
                action = 2
            else:
                action = 3
            observation, reward, done, info = env.step(action)
            if reward>0:
                totalScore += reward
            if done:
                break
    bScore = totalScore/100
    return bScore
def show():
    observation = env.reset()
    for t in range(1000):
        env.render()
        action1 = 0
        action2 = 0
        for x in range(ob):
            action1 += b[x]*observation[x]
            action2 += b[x+ob]*observation[x]
        action = 0
        if action1>action2:
            action = 2
        else:
            action = 3
        observation, reward, done, info = env.step(action)
        if done:
            break
def train():
    bestReward = 0.89
    for k in range(100):
        observation = env.reset()
        a = []
        for i in range(ob*2):
            a.append(1)
        for x in range(len(a)):
            a[x] = b[x]
        score = 0
        a[randint(0,ob-1)] += (random()*2-1)
        if k%10==0:
            print (10-k/10)
        for t in range(1000):
            # print t
            action1 = 0
            action2 = 0
            for x in range(ob):
                action1 += a[x]*observation[x]
                action2 += a[x+ob]*observation[x]
            action = 0
            if action1>action2:
                action = 2
            else:
                action = 3
            observation, reward, done, info = env.step(action)
            if reward>0:
                score += reward
            if done or t==999:
                if score > bestReward:
                    thisBest = b100(a)
                    if thisBest>bestReward:
                        bestReward = thisBest
                        print ("new best", thisBest)
                        for x in range(len(b)):
                            b[x] = a[x]
                break
    return bestReward
# print train()
# print b100(b)
# print b
show()
